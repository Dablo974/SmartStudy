'use server';

/**
 * @fileOverview An AI flow to generate Multiple Choice Questions (MCQs) from a given text.
 * 
 * - generateMcqsFromText - A function that takes course material as a string and returns a set of MCQs.
 * - GeneratedMcq - The type for a single MCQ generated by the AI.
 * - GenerateMcqsOutput - The type for the array of generated MCQs.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

// Schema for a single generated MCQ
const GeneratedMcqSchema = z.object({
  question: z.string().describe('The question text.'),
  options: z.array(z.string()).length(4).describe('An array of exactly 4 possible answers.'),
  correctAnswerIndex: z.number().min(0).max(3).describe('The 0-based index of the correct answer in the options array.'),
  explanation: z.string().describe('A brief explanation of why the answer is correct.'),
  subject: z.string().optional().describe('A suggested subject or topic for the question, derived from the text.'),
});
export type GeneratedMcq = z.infer<typeof GeneratedMcqSchema>;

// Schema for the overall output from the AI
const GenerateMcqsOutputSchema = z.object({
  mcqs: z.array(GeneratedMcqSchema),
});
export type GenerateMcqsOutput = z.infer<typeof GenerateMcqsOutputSchema>;

// The main exported function that the frontend will call
export async function generateMcqsFromText(courseText: string): Promise<GenerateMcqsOutput> {
  return generateMcqsFlow({ courseText });
}

// Define the prompt for the AI
const generateMcqsPrompt = ai.definePrompt({
  name: 'generateMcqsPrompt',
  input: { schema: z.object({ courseText: z.string() }) },
  output: { schema: GenerateMcqsOutputSchema },
  prompt: `You are an expert educator and exam creator. Your task is to generate a comprehensive set of multiple-choice questions (MCQs) based on the provided text. The number of questions should be appropriate for the length and information density of the text. For a short text, 5 questions might be enough. For a detailed, multi-page document, 15-20 questions would be more suitable. Use your judgment to create a thorough and relevant quiz that covers the key concepts.

For each MCQ, you must provide:
1.  A clear and concise question that tests a key concept from the text.
2.  Four distinct options (A, B, C, D). One option must be correct, and the others should be plausible but incorrect distractors.
3.  The 0-based index of the correct answer. For example, if option B is correct, the index is 1.
4.  A brief but clear explanation for why the chosen answer is correct, referencing concepts from the text.
5.  A one or two-word subject or topic for the question based on the text content.

Analyze the text carefully and create questions that cover a good range of topics within it. Avoid overly simple or trivial questions.

Here is the text to analyze:
---
{{{courseText}}}
---
`,
});

// Define the Genkit flow
const generateMcqsFlow = ai.defineFlow(
  {
    name: 'generateMcqsFlow',
    inputSchema: z.object({ courseText: z.string() }),
    outputSchema: GenerateMcqsOutputSchema,
  },
  async (input) => {
    const { output } = await generateMcqsPrompt(input);
    if (!output) {
      throw new Error('AI failed to generate MCQs.');
    }
    return output;
  }
);
